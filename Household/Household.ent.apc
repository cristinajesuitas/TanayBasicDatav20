{Application 'POPULATION' logic file generated by CSPro}
PROC GLOBAL

// The household application does not include consistency checks. However, skips and range checks are included. The
// intention was to strike a balance between creating an easy to understand application and the complexities of a
// real-world application.


// ------------------
// ------------------ Global variables
// ------------------

string partially_saved_field;

// ------------------
// ------------------ CAPI text variables
// ------------------


string capi_staff_name;
string capi_region_name;
string capi_province_name;
string capi_municipal_name;
string capi_barangay_name;
string capi_ea_name;
string capi_household_name;
string capi_household_name_sex;
numeric capi_number_of_persons;

// ------------------
// ------------------ CAPI text functions
// ------------------

function string CapiHeadName()

	CapiHeadName = strip(BI_NAME(1));
	
end;

// ------------------
// ------------------ Occurrence label and visibility functions
// ------------------


function ShowHidePopulation()

	do numeric ctr = 1 while ctr <= maxocc(POPULATION_BASICS_ROSTER) and visualvalue(BI_KEEP_ROW(ctr)) <> notappl
		
		numeric showRow = 0;
		if visualvalue(BI_KEEP_ROW(ctr)) = 1 then
			showRow = 1;
		endif;
		
		string populationLabel;

		if showRow then
			populationLabel = BI_NAME(ctr);
			
		else
			populationLabel = "<Deleted>";
			
		endif;

		showocc(POPULATION_BASICS_ROSTER(ctr), showRow);
		showocc(POPULATION_DETAILS_ROSTER(ctr), showRow);
		setocclabel(POPULATION_BASICS_ROSTER(ctr), populationLabel);
		setocclabel(POPULATION_DETAILS_ROSTER(ctr), populationLabel);

	enddo;

end;

// ------------------
// ------------------ GPS
// ------------------


numeric max_time = 120;
numeric desired_accuracy = 20;
string capi_gps_reading = "Take GPS reading?";
string capi_gps_data_status;
string capi_gps_accuracy_status_label;
string capi_gps_accuracy_status;


// Verify whether all GPS data values exist
function IsCompleteGPSData()

	IsCompleteGPSData = 0;
	if BI_GPS_LATITUDE <> notappl
		and BI_GPS_LONGITUDE <> notappl
		and BI_GPS_ALTITUDE <> notappl
		and BI_GPS_ACCURACY <> notappl
		and BI_GPS_SATELLITES <> notappl
		and BI_GPS_READTIME <> notappl then
		IsCompleteGPSData = 1;
	endif;

end;

// Verify whether GPS accuracy is within defined range
function IsDesiredAccuracy()

	IsDesiredAccuracy = 0;
	if 0 <= BI_GPS_ACCURACY and BI_GPS_ACCURACY <= desired_accuracy then
		IsDesiredAccuracy = 1;
	endif;

end;

// Assign result of GPS reading
function AssignGPSValues()

	AssignGPSValues = 0;
	numeric input = 1;
	if IsCompleteGPSData() then
	
		if gps(accuracy) > BI_GPS_ACCURACY then
			// Prompt user before replacing GPS data with less accurate GPS data
			input = warning("Previous GPS data (accuracy = %d) will be replaced with less "
				"accurate GPS data (accuracy = %d).", BI_GPS_ACCURACY, gps(accuracy))
				select("Confirm", continue, "Cancel", continue);

		else
			// Prompt user before replacing GPS data
			input = warning("Previous GPS data will be replaced.")
				select("Confirm", continue, "Cancel", continue);
				
		endif
		
	endif;

	if input <> 2 then
		BI_GPS_LATITUDE = gps(latitude);
		BI_GPS_LONGITUDE = gps(longitude);
		BI_GPS_ALTITUDE = gps(altitude);
		BI_GPS_ACCURACY = gps(accuracy);
		BI_GPS_SATELLITES = gps(satellites);
		BI_GPS_READTIME = gps(readtime);
		AssignGPSValues = 1;
	endif;

end;

// Delete GPS data
function DeleteGPSData()

	BI_GPS_LATITUDE = notappl;
	BI_GPS_LONGITUDE = notappl;
	BI_GPS_ALTITUDE = notappl;
	BI_GPS_ACCURACY = notappl;
	BI_GPS_SATELLITES = notappl;
	BI_GPS_READTIME = notappl;

end;


// Take GPS reading
function TakeGPSReading()

	if gps(open) then
		
		numeric result = gps(read, max_time, desired_accuracy);
		if result = 1 then
			
			// Read was successful
			if AssignGPSValues() then
				capi_gps_reading = "Take GPS reading?";

			else
				capi_gps_reading = "You chose not to update GPS data. Retake GPS reading?";
				reenter;
				
			endif;

		elseif result = -1 then		
			capi_gps_reading = "GPS reading cancelled by user. Retake GPS reading?";
			reenter;

		elseif result = 0 then			
			capi_gps_reading = "GPS reading failed. Retake GPS reading?";
			reenter;
			
		endif;

		gps(close);

	else
		capi_gps_reading = "Failed to start GPS. Retake GPS reading?";
		reenter;
		
	endif;

end;

PROC INHABITANT_FF

PROC INHABITANT_QUEST

preproc

	// In case we come back from partial save or modify mode, do this after loading the questionnaire
	ShowHidePopulation();

	partially_saved_field = getsymbol(savepartial);
PROC BI_REGION

preproc

	BI_REGION = tonumber (sysparm("Region"));
	BI_PROVINCE = tonumber(sysparm("Province"));
	BI_MUNICIPAL = tonumber(sysparm("Municipal"));
	BI_BARANGAY = tonumber(sysparm("Barangay"));
	BI_EA = tonumber(sysparm("EA"));
	BI_SEGMENT = sysparm("Segment");
	BI_HH_NUMBER = tonumber(sysparm("HouseholdNumber"));

	capi_region_name = sysparm("RegionName");
	capi_province_name = sysparm("ProvinceName");
	capi_municipal_name = sysparm("MunicipalName");
	capi_barangay_name = sysparm("BarangayName");
	capi_ea_name = sysparm("EAName");
	capi_household_name = maketext("%v%v", BI_SEGMENT, visualvalue(BI_HH_NUMBER));

	capi_staff_name = sysparm("StaffName");

	// Store some metadata
	BI_INTERVIEWER_CODE = sysparm("InterviewerCode");
	BI_SUPERVISOR_CODE = sysparm("SupervisorCode");

	if BI_START_INTERVIEW_TIME = notappl then
		BI_START_INTERVIEW_TIME = timestamp();
	endif;

	// End interview time will be overwritten when the case is finalized
	BI_END_INTERVIEW_TIME = timestamp();

	BI_PROGRAM_PUBLISH_DATE = publishdate();
PROC BI_INTRODUCTION

preproc

	// Prefill continue
	BI_INTRODUCTION = 1;

	if ispartial() and partially_saved_field <> getsymbol() then
		setvalueset(BI_INTRODUCTION, BI_INTRODUCTION_PARTIAL_VS);
		// Default to resume
		BI_INTRODUCTION = 2;

	elseif demode() <> add then
		setvalueset(BI_INTRODUCTION, BI_INTRODUCTION_MODIFY_VS);

	else
		setvalueset(BI_INTRODUCTION, BI_INTRODUCTION_BEGIN_VS);

	endif;

postproc

	if BI_INTRODUCTION = 2 then
		// Resume from partial save
		advance to partially_saved_field;
	endif;


PROC BI_GPS_READING

onfocus

	if IsCompleteGPSData() then
	
		// Update value set
		if getos() = 10 then
			setvalueset(BI_GPS_READING, BI_GPS_WINDOWS_EXISTING_DATA_VS);
			
		else
			setvalueset(BI_GPS_READING, BI_GPS_MOBILE_EXISTING_DATA_VS);
			
		endif;
		
		// Update CAPI Text
		capi_gps_data_status = "collected";
		capi_gps_accuracy_status_label = "GPS accuracy: ";
		if IsDesiredAccuracy() then
			capi_gps_accuracy_status = "pass";

		else
			capi_gps_accuracy_status = "fail";
			
		endif;

		// Prefill "keep data" so field can be advanced through when returning from partial save 
		BI_GPS_READING = 2;

	else
	
		// Update value set
		if getos() = 10 then
			setvalueset(BI_GPS_READING, BI_GPS_WINDOWS_NO_DATA_VS);
			
		else
			setvalueset(BI_GPS_READING, BI_GPS_MOBILE_NO_DATA_VS);
			
		endif;

		// Update CAPI Text
		capi_gps_data_status = "not collected";
		capi_gps_accuracy_status_label = "";
		capi_gps_accuracy_status = "";
		
	endif;

postproc

	// Handle user input
	if BI_GPS_READING = 1 then
		TakeGPSReading();

	elseif BI_GPS_READING = 2 then
		capi_gps_reading = "Take GPS reading?";

	elseif BI_GPS_READING = 3 then
		if IsCompleteGPSData() then
			warning("GPS data will be deleted.")
				select("Confirm", continue, "Cancel", BI_GPS_READING);
		endif;

		DeleteGPSData();
		capi_gps_reading = "Take GPS reading?";

	else
		warning("Unhandled value set option.");
		reenter;
		
	endif;
PROC BI_RESPONDENT_NAME


PROC BI_UNIT_NO


PROC BI_POPULATION_SECTION

preproc

	// Prefill continue
	BI_POPULATION_SECTION = 1;

PROC BI_KEEP_ROW

preproc

	// Initialize when entering row for 1st time
	if visualvalue(BI_KEEP_ROW) = notappl or curocc() = 1 then
		BI_KEEP_ROW = 1;
		noinput;
	endif;

onfocus

	// once a row is deleted, it can't be modified
	if visualvalue(BI_KEEP_ROW) = 2 then
		setproperty(BI_KEEP_ROW, "Protected", "Yes");
		
	else
		setproperty(BI_KEEP_ROW, "Protected", "No");
		
	endif;

postproc

	ShowHidePopulation();

	if BI_KEEP_ROW = 2 then
	
		// Row is deleted
		if curocc() = 1 then
			errmsg("Cannot delete first row.");
			BI_KEEP_ROW = 1;
			
		else
			skip to BI_MORE_ROWS;
			
		endif;

	endif;



PROC BI_RELATIONSHIP

onfocus

	if curocc() = 1 then
		setproperty(BI_RELATIONSHIP, "Protected", "Yes");
		setvalueset(BI_RELATIONSHIP, BI_RELATIONSHIP_WITH_HEAD_VS);
		BI_RELATIONSHIP = 1;

	else
		setproperty(BI_RELATIONSHIP, "Protected", "No");
		setvalueset(BI_RELATIONSHIP, BI_RELATIONSHIP_WITHOUT_HEAD_VS);

	endif;

PROC BI_MORE_ROWS
preproc

	savepartial();

	// If there are already more rows defined, this value has to be 1
	if curocc() < maxocc(POPULATION_BASICS_ROSTER) and BI_NAME(curocc() + 1) <> "" then
		BI_MORE_ROWS = 1;
		noinput;
	endif;

onfocus

	// and then cannot be modified
	if curocc() < maxocc(POPULATION_BASICS_ROSTER) and BI_NAME(curocc() + 1) <> "" then
		setproperty(BI_MORE_ROWS, "Protected", "Yes");
		
	else
		setproperty(BI_MORE_ROWS, "Protected", "No");
		
	endif;

	capi_number_of_persons = 0;
	capi_household_name_sex = "";

	do numeric ctr = 1 while ctr <= curocc()

		if BI_KEEP_ROW(ctr) = 1 then
			capi_household_name_sex = capi_household_name_sex + maketext("%s, %s<br />", strip(BI_NAME(ctr)), getlabel(BI_SEX, BI_SEX(ctr)));
			inc(capi_number_of_persons);
		endif;

	enddo;

postproc

	if BI_MORE_ROWS = 2 then
		// No more household members
		endgroup;
	endif;



PROC BI_BIRTH_MONTH

preproc

	if BI_KEEP_ROW = 2 then
		skip to next;
		
	elseif curocc() > totocc(POPULATION_BASICS_ROSTER) then
		// No more household members
		endgroup;
		
	endif;
PROC BI_AGE

preproc

numeric date1 = 20180501;
numeric date2 = tonumber(BI_DATE_OF_BIRTH);

BI_AGE = datediff(date1,date2 ,"y"); 
PROC BI_CONTINENT_BIRTH


