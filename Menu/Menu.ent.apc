{Application 'MENU' logic file generated by CSPro}
PROC GLOBAL

numeric supervisor_password = 123456;
string login_setting_key = "TBD Login";
string assignment_setting_key = "TBD Assignment";
string segment_alphabet = "1234567890";
array string months(12) = "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec";

// ------------------
// ------------------ CAPI text variables
// ------------------


string capi_publish_date;
string capi_staff_name;	// Name of the person who logged into the system
string capi_staff_role;
string capi_manage_staff_name; // Various names of interviewers used throughout the system
string capi_region_name;
string capi_province_name;
string capi_municipal_name;
string capi_barangay_name;
numeric capi_ea_assigned_count;
numeric capi_household_complete_count;
numeric capi_household_partial_count;

// ------------------
// ------------------ Functions to simplify looking up geographic names
// ------------------

function string LookupGeographyName(region,province,municipal, barangay)

	GEO_REGION = region;
	GEO_PROVINCE = province;
	GEO_MUNICIPAL = municipal;
	GEO_BARANGAY = barangay;
	GEO_EA = notappl;

	if loadcase(TBD_GEO_DICT, GEO_REGION,GEO_PROVINCE, GEO_MUNICIPAL, GEO_BARANGAY, GEO_EA) then
		LookupGeographyName = strip(GEO_AREA_NAME);

	else
		LookupGeographyName = "<Invalid Geocode>";

	endif;

end;

function string LookupRegionName(region)

	LookupRegionName = LookupGeographyName(region, notappl, notappl,notappl);
	
end;

function string LookupProvinceName(region,province)

	LookupProvinceName = LookupGeographyName(region, province, notappl, notappl);
	
end;

function string LookupMunicipalName(region, province, municipal)

	LookupMunicipalName = LookupGeographyName(region, province, municipal, notappl);
	
end;
function string LookupBarangayName(region, province, municipal, barangay)

	LookupBarangayName = LookupGeographyName(region, province, municipal, barangay);
	
end;

function string LookupEAName(ea)

	LookupEAName = maketext("EA%03d", ea);
	
end;

function string LookupDetailedHouseholdName()

	string detailedName = maketext("%s%v", BI_SEGMENT, BI_HH_NUMBER);

	if count(BI_NAME) >= 1 and BI_NAME(1) <> "" then
		detailedName = detailedName + maketext(" - %v", strip(BI_NAME(1)));
	endif;

	LookupDetailedHouseholdName = detailedName;

end;



function string LookupStaffName(string code)

	// If staff member's information is already loaded, don't load again
	if STAFF_CODE = code or loadcase(TBD_STAFF_DICT, code) then
		LookupStaffName = strip(STAFF_NAME);

	else
		LookupStaffName = "<Invalid Staff>";

	endif;

end;

// ------------------
// ------------------ PFF functions
// ------------------


file pffFile;


function LaunchHouseholdProgram()

	string programName = "Household";
	setfile(pffFile,maketext("../%s/%s.pff", programName, programName), create);

	filewrite(pffFile, "[Run Information]");
	filewrite(pffFile, "Version=CSPro 7.1");
	filewrite(pffFile, "AppType=Entry");
	filewrite(pffFile, "Description=Tanay Basic Data census %s Questionnaire", programName);

	filewrite(pffFile, "[DataEntryInit]");
	filewrite(pffFile, "FullScreen=Yes");
	filewrite(pffFile, "StartMode=Add;%v%v%v%v%v%s%v", BI_REGION, BI_PROVINCE, BI_MUNICIPAL, BI_BARANGAY, BI_EA, BI_SEGMENT, BI_HH_NUMBER);
	filewrite(pffFile, "Lock=CaseListing");
	filewrite(pffFile, "ShowInApplicationListing=Never");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile, "Application=%s.ent", programName);
	filewrite(pffFile, "InputData=%s", filename(TBD_INHABITANT_DICT));

	filewrite(pffFile, "[Parameters]");
	filewrite(pffFile, "OnExit=../Menu/Menu.pff");

	// Geocodes
	filewrite(pffFile, "Region=%v", BI_REGION);
	filewrite(pffFile, "Province=%v", BI_PROVINCE);
	filewrite(pffFile, "Municipal=%v", BI_MUNICIPAL);
	filewrite(pffFile, "Barangay=%v", BI_BARANGAY);
	filewrite(pffFile, "EA=%v", BI_EA);
	filewrite(pffFile, "Segment=%v", BI_SEGMENT);
	filewrite(pffFile, "HouseholdNumber=%v", BI_HH_NUMBER);

	// Other metadata
	filewrite(pffFile, "RegionName=%s", LookupRegionName(BI_REGION));
	filewrite(pffFile, "ProvinceName=%s", LookupProvinceName(BI_REGION, BI_PROVINCE));
	filewrite(pffFile, "MunicipalName=%s", LookupMunicipalName(BI_REGION, BI_PROVINCE, BI_MUNICIPAL));
	filewrite(pffFile, "BarangayName=%s", LookupBarangayName(BI_REGION, BI_PROVINCE, BI_MUNICIPAL, BI_BARANGAY));
	filewrite(pffFile, "EAName=%s", LookupEAName(BI_EA));
	filewrite(pffFile, "InterviewerCode=%v", LOGIN);
	filewrite(pffFile, "SupervisorCode=%v", SUPERVISOR_STAFF_CODE);
	filewrite(pffFile, "StaffName=%s", LookupStaffName(LOGIN));

	close(pffFile);

	execpff(filename(pffFile), stop);

end;


// ------------------
// ------------------ Report functions
// ------------------


// Workload is a 2-dimensional array of interviewers and their assignments
// INTERVIEWER   | ASSIGNMENT   | ASSIGNMENT
// Interviewer01 | assignment01 | assignment02
// Interviewer02 | assignment01 | assignment02

array string workload(99, 99);
file report_file;

function string GetInterviewerName(string staffCode)
	
	if loadcase(TBD_STAFF_DICT, staffCode) then
		GetInterviewerName = strip(STAFF_NAME);
		
	else
		GetInterviewerName = "<Invalid Staff Code>";
		
	endif;

end;
function string formatHeader(string staffName)

	string header = "-" + staffName;
	numeric maxHeaderLength = 51; // Max length of "-" + STAFF_NAME (which has length of 50)
	while (length(header) < maxHeaderLength) do
		header = header + "-";
	enddo;
	
	formatHeader = header;

end;

function string formatTimeStamp(ts)

	if ts = 0 then
		formatTimeStamp = "-";

	else
		numeric month = sysdate("MM", ts);
		numeric day = sysdate("DD", ts);
		numeric year = sysdate("YYYY", ts);
		formatTimeStamp = maketext("%d %s %d", day, months(month), year);

	endif;

end;

// Initialize first column of the workload array with the interviewer's staff code
function InitInterviewers()
	
	numeric interviewer = 1;
	// Loop through all interviewers that are supervised by the currently logged in supervisor
	forcase TBD_STAFF_DICT where SUPERVISOR_STAFF_CODE = LOGIN do
		
		workload(interviewer, 1) = STAFF_CODE;
		inc(interviewer);
		
	enddo;
	
	// Denote last row
	workload(interviewer, 1) = "";
		
end;


// Initialize columns right of interviewer's name with their assignments
function InitAssignments()
	
	numeric interviewer = 1;
	numeric assignment = 2;
	// Loop through each interviewer
	while workload(interviewer, 1) <> "" do
		// Loop through each assignment that is assigned to interviewer
		forcase TBD_ASSIGNMENTS_DICT where pos(workload(interviewer, 1), key(TBD_ASSIGNMENTS_DICT)) <> 0 do
			
			workload(interviewer, assignment) = maketext("%v%v%v%v%v%v", ASSIGNMENTS_REGION,ASSIGNMENTS_PROVINCE
				, ASSIGNMENTS_MUNICIPAL, ASSIGNMENTS_BARANGAY, ASSIGNMENTS_EA, ASSIGNMENTS_SEGMENT);
			inc(assignment);
				
		enddo;
		
		// Denote last column in current row
		workload(interviewer, assignment) = "";
		inc(interviewer);
		assignment = 2;  // Reset to 1st assignment
	
	enddo;
	
end;

function ShowInterviewerStatusReport()
	
	// Write report to file
	string dataDirectory = pathname(Application) + "../Data/";
	dircreate(dataDirectory); // Make sure directory exists
	setfile(report_file, dataDirectory + "Interviewer Status Report.txt");
	
	// Initialize the workload array
	InitInterviewers();
	InitAssignments();
	
	numeric interviewer = 1;
	// Loop through each interviewer in workload
	while workload(interviewer, 1) <> "" do	
		
		numeric partial = 0;
		numeric complete = 0;
		numeric male = 0;
		numeric female = 0;
		numeric lastInterview = 0;
		
		numeric assignment = 2;
		// Loop through interviewer's assignments
		while workload(interviewer, assignment) <> "" do

			// Loop through households that are within the interviewer's assignment
			forcase TBD_INHABITANT_DICT where pos(workload(interviewer, assignment), key(TBD_INHABITANT_DICT)) <> 0 do
				
				// Is the household case a partial or complete save?
				if ispartial(TBD_INHABITANT_DICT) then
					inc(partial);
					
				else
					inc(complete);
					
				endif;
				
				// How many males and females have been counted?
				male = male + count(TBD_INHABITANT_DICT.INHABITANT_REC where BI_SEX = 1);
				female = female + count(TBD_INHABITANT_DICT.INHABITANT_REC where BI_SEX = 2);
				
				// When was the last interview completed?
				if lastInterview < BI_END_INTERVIEW_TIME then
					lastInterview = BI_END_INTERVIEW_TIME;
				endif;
				
			enddo;
			
			inc(assignment);
			
		enddo;
		
		filewrite(report_file, "%s", formatHeader(GetInterviewerName(workload(interviewer, 1))));
		filewrite(report_file, "   Partial: %d", partial);
		filewrite(report_file, "   Complete: %d", complete);
		filewrite(report_file, "   Total Males: %d", male);
		filewrite(report_file, "   Total Females: %d", female);
		filewrite(report_file, "   Last Interview: %s", formatTimeStamp(lastInterview));
		
		inc(interviewer);
		assignment = 2; // Reset to 1st assignment
		
	enddo;
	
	close(report_file);

	// View report
	if getos() = 10 then
		// Windows	
		execsystem(maketext("explorer.exe %s", filename(report_file)));
		
	elseif getos() = 20 then
		// Android
		execsystem(maketext("view:%s", filename(report_file)));
		
	else
		// Windows Universal
		errmsg("Reports not supported on this platform");
	endif;
	
end;

// ------------------
// ------------------ Functions to simplify creating dynamic value sets
// ------------------


numeric vs_ctr;
array vs_codes(500);
array string vs_string_codes(500);
array string vs_labels(500);

// This function does not need to be called directly
function EndVS()

	vs_codes(vs_ctr) = notappl;
	vs_string_codes(vs_ctr) = "";
	
end;


function ResetVS()

	vs_ctr = 1;
	EndVS();
	
end;

// This function does not need to be called directly
function AddLabelToVS(string vsLabel)
	
	vs_labels(vs_ctr) = strip(vsLabel);
	inc(vs_ctr);
	EndVS();
	
end;

function AddNumericVS(vsCode, string vsLabel)

	vs_codes(vs_ctr) = vsCode;
	AddLabelToVS(vsLabel);
	
end;

// Value set codes (vsCode) are usually numerics. However, the key of the case (see key function) is useful,
// because it is unique and can be used to load the case after it is selected. It is returned as a string,
// so additional value set codes will need to stringified.
function AddStringVS(string vsCode, string vsLabel)

	vs_string_codes(vs_ctr) = vsCode;
	AddLabelToVS(vsLabel);
	
end;

// ------------------
// ------------------ Sync functions
// ------------------

string MenuPenMd5;
string MenuPffMd5;

function SaveApplicationSnapshot()

	MenuPenMd5 = diagnostics("md5", "Menu.pen");
	MenuPffMd5 = diagnostics("md5", "Menu.pff");
	
end;

function RestartApplicationIfModified()

	// Compare the saved MD5s against the new MD5s to see if the files have changed
	if MenuPenMd5 <> diagnostics("md5", "Menu.pen") or MenuPffMd5 <> diagnostics("md5", "Menu.pff") then
		errmsg("The application has been updated and will be restarted.");
		execpff("Menu.pff", stop);
	endif;

end;

function StartServer()

	SaveApplicationSnapshot();

	if not syncserver(Bluetooth) then
		errmsg("Failed to start Bluetooth server.");
	endif;

	RestartApplicationIfModified();

end;

// Not a standalone sync function. Does not call syncconnect or syncdisconnect.
function SyncDataWithInterviewer()
	
	numeric success = 1;
	
	forcase TBD_STAFF_DICT where STAFF_CODE = LOGIN or SUPERVISOR_STAFF_CODE = LOGIN do
		
		// Synchronize staff code for supervisor and their interviewers. Supervisor's staff code is sent, so supervisor
		// is able to log onto their account using interviewer's device.
		// Sync BOTH is used, because the supervisor and interview write to the staff data.
		if success and not syncdata(BOTH, TBD_STAFF_DICT) then
			errmsg("Failed to transfer interviewer's staff data. Transfer aborted.");
			success = 0;
			break;
		endif;
					
	endfor;
		
	// Create universe for supervisory area.
	string universeStr = maketext("%v%v%v%v", ASSIGNMENTS_REGION, ASSIGNMENTS_PROVINCE, ASSIGNMENTS_MUNICIPAL, ASSIGNMENTS_BARANGAY);

	// Synchronize assignments in supervisory area.
	// Sync BOTH is used, because the supervisor and interview write to the assignments data.
	if success and not syncdata(BOTH, TBD_ASSIGNMENTS_DICT, universeStr) then
		errmsg("Failed to transfer assignment data. Transfer aborted.");
		success = 0;
	endif;
	
	// Synchronize households in supervisory area.
	// Sync BOTH is used to distribute household data to all interviewers. This increases redundancy in case the
	// supervisor's device is lost. Alternatively, a GET can be used, because only the interviewer writes to the
	// household data.
	if success and not syncdata(BOTH, TBD_INHABITANT_DICT, universeStr) then
		errmsg("Failed to transfer household data. Transfer aborted.");
		success = 0;
	endif;
	
	// Send all geocodes.
	// Sync PUT is used, because the interviewer only reads the geocodes data.
	if success and not syncdata(PUT, TBD_GEO_DICT) then
		errmsg("Failed to transfer geocode data.");
		success = 0;
	endif;
	
	SyncDataWithInterviewer = success;

end;

function SyncWithInterviewer()

	numeric success = 1;

	if syncconnect(Bluetooth) then
		
		success = SyncDataWithInterviewer();

		if success and not syncfile(PUT, ".\Menu.pff", ".\Menu.pff") then
			errmsg("Failed to transfer Menu.pff. Transfer aborted.");
			success = 0;
		endif;
	
		if success and not syncfile(PUT, ".\Menu.pen", ".\Menu.pen") then
			errmsg("Failed to transfer Menu.pen. Transfer aborted.");
			success = 0;
		endif;
	
		if success and not syncfile(PUT, "..\Household\Household.pen", "..\Household\Household.pen") then
			errmsg("Failed to transfer Household.pen. Transfer aborted.");
			success = 0;
		endif;

		if not syncdisconnect() then
			errmsg("Failed to disconnect from Bluetooth server.");
			success = 0;
		endif;

	else
		errmsg("Failed to connect to Bluetooth server.");
		success = 0;

	endif;

	SyncWithInterviewer = success;

end;

// Not a standalone sync function. Does not call syncconnect or syncdisconnect.
function SyncDataWithHQ()
	
	numeric success = 1;
			
	forcase TBD_STAFF_DICT where STAFF_CODE = LOGIN or SUPERVISOR_STAFF_CODE = LOGIN do
		
		// Synchronize staff code for supervisor and their interviewers. 
		// Sync PUT is used, because HQ will only read the staff data.
		if success and not syncdata(PUT, TBD_STAFF_DICT) then
			errmsg("Failed to transfer interviewer's staff data. Transfer aborted.");
			success = 0;
			break;
		endif;
					
	endfor;
		
	// Create universe for supervisory area.
	string universeStr = maketext("%v%v%v%V", ASSIGNMENTS_REGION, ASSIGNMENTS_PROVINCE, ASSIGNMENTS_MUNICIPAL, ASSIGNMENTS_BARANGAY);
	
	// Synchronize assignments in supervisory area.
	// Sync PUT is used, because HQ will only read the assignments data.
	if success and not syncdata(PUT, TBD_ASSIGNMENTS_DICT, universeStr) then
		errmsg("Failed to transfer assignment data. Transfer aborted.");
		success = 0;
	endif;
	
	// Synchronize households in supervisory area.
	// Sync PUT is used, because HQ will only read the household data.
	if success and not syncdata(PUT, TBD_INHABITANT_DICT, universeStr) then
		errmsg("Failed to transfer household data. Transfer aborted.");
		success = 0;
	endif;
		
	SyncDataWithHQ = success;

end;

numeric full_sync = 1;
numeric app_sync = 2;

function SyncWithHQ(syncType)

	numeric success = 1;

	SaveApplicationSnapshot();

	if syncconnect(Dropbox) then

		if syncType = full_sync then
			success = SyncDataWithHQ();
		endif;

		// Save the MD5 value before syncing
		string menuPFF = diagnostics("md5", ".\Menu.pff");
		string menuPEN = diagnostics("md5", ".\Menu.pen");

		if success and not syncfile(GET, "/DeployPSC/Menu/Menu.pff", ".\Menu.pff") then
			errmsg("Failed to receive Menu.pff. Transfer aborted.");
			success = 0;
		endif;

		if success and not syncfile(GET, "/DeployPSC/Menu/Menu.pen", ".\Menu.pen") then
			errmsg("Failed to receive Menu.pen. Transfer aborted.");
			success = 0;
		endif;

		if success and not syncfile(GET, "/DeployPSC/Household/Household.pen", "..\Household\Household.pen") then
			errmsg("Failed to receive Household.pen. Transfer aborted.");
			success = 0;
		endif;
		
		// Receive all geocodes. This is a lookup file, so update with applications.
		// Sync GET is used, because only HQ writes to the geocodes data.
		if success and not syncdata(GET, TBD_GEO_DICT) then
			errmsg("Failed to transfer geocode data.");
			success = 0;
		endif;

		if not syncdisconnect() then
			errmsg("Failed to disconnect from Dropbox.");
			success = 0;
		endif;

	else
		errmsg("Failed to connect to Dropbox.");
		success = 0;

	endif;

	RestartApplicationIfModified();

	SyncWithHQ = success;

end;

// ------------------
// ------------------ Miscellaneous functions
// ------------------

function SwitchUsers()

	// Clear the saved login and assignment
	savesetting(login_setting_key, "");
	savesetting(assignment_setting_key, "");
	reenter LOGIN_FORM;

end;

function SwitchAssignments()

	// Clear the saved assignment
	savesetting(assignment_setting_key, "");
	reenter ASSIGNMENT_SELECTION_FORM;

end;


// Check that no person, other than someone with code ignoreStaffCode, has the name in staffName
function VerifyStaffNameIsUnique(string staffName, string ignoreStaffCode)

	numeric nameIsUsed = countcases(TBD_STAFF_DICT where STAFF_CODE <> ignoreStaffCode and STAFF_NAME = staffName);

	if ignoreStaffCode <> "" then
		// Load the staff entry that was in memory
		loadcase(TBD_STAFF_DICT, ignoreStaffCode);
	endif;

	if nameIsUsed then
		errmsg("The name %s is used by another staff member", strip(staffName));
		reenter;
	endif;

end;

function ValidatePINCode(code)

	if code < 100000 then
		errmsg("The PIN code must be six digits and cannot start with 0");
		reenter;
	endif;

	if( errmsg("Confirm that %06d is the correct code", code)
		select("Correct", continue,"Incorrect", continue) ) = 2 then
		reenter;
	endif;

end;


// ------------------
// ------------------ Program code
// ------------------

PROC MENU_FF

PROC LOGIN

preproc

	// This is the first field and preprocs are only executed when moving forward. Therefore, this is the first login
	// after application startup. Try to log in automatically.
	numeric automaticLoginOnStartup = 1;

onfocus

	if automaticLoginOnStartup then

		// The application was just started. Retrieve previous user.
		STAFF_CODE = loadsetting(login_setting_key);

		if loadcase(TBD_STAFF_DICT, STAFF_CODE) and PIN_CODE <> notappl then
			// Previous user was found and PIN is defined, so login automatically for convenience
			LOGIN = STAFF_CODE;
			PIN_CODE_CONFIRMATION = PIN_CODE;
			advance to ASSIGNMENT_SELECTION_FORM;
		endif;

	endif;

	ResetVS();

	forcase TBD_STAFF_DICT do
		AddStringVS(key(TBD_STAFF_DICT), STAFF_NAME);
	endfor;

	AddStringVS("1", "Update programs from headquarters");
	AddStringVS("2", "Update programs from supervisor");
	AddStringVS("3", "Begin work as a supervisor");

	setvalueset(LOGIN, vs_string_codes, vs_labels);

	// Clear the login
	LOGIN = "";
	PIN_CODE_CONFIRMATION = notappl;

	// Useful to see if the current application is being used
	numeric publishYYYYMMDD = int(publishdate() / 1000000);
	numeric publishDD = publishYYYYMMDD % 100; // % = remainder (extract the last two digits)
	numeric publishMM = int(publishYYYYMMDD / 100) % 100;
	numeric publishYYYY = int(publishYYYYMMDD / 10000);
	capi_publish_date = maketext("%d %s %d", publishDD, months(publishMM), publishYYYY);

postproc

	// Do not automtically login on further attempts. If user tries to log in again, it is because they choose to
	// switch users, so allow them to select their staff name.
	automaticLoginOnStartup = 0;

	if LOGIN = "1" then
		SyncWithHQ(app_sync);
		reenter;

	elseif LOGIN = "2" then
		StartServer();
		reenter;

	elseif LOGIN = "3" then
		skip to SUPERVISOR_CREATION_FORM;

	elseif loadcase(TBD_STAFF_DICT,LOGIN) then
		capi_staff_name = LookupStaffName(LOGIN);

	endif;



PROC PIN_CODE_CONFIRMATION

preproc

	setproperty(PIN_CODE_CONFIRMATION, "Protected", "No");

postproc

	if PIN_CODE = notappl then
		// Creating a new PIN code
		ValidatePINCode(PIN_CODE_CONFIRMATION);

		PIN_CODE = PIN_CODE_CONFIRMATION;
		DEVICE_ID = getdeviceid();
		writecase(TBD_STAFF_DICT);

	elseif PIN_CODE_CONFIRMATION <> PIN_CODE then
		// Validating an existing PIN code
		errmsg("Invalid PIN code");
		reenter;

	endif;

	savesetting(login_setting_key, STAFF_CODE);

	setproperty(PIN_CODE_CONFIRMATION, "Protected", "Yes");

	skip to ASSIGNMENT_SELECTION_FORM;
PROC SUPERVISOR_CREATION_FORM

preproc

	setproperty(SUPERVISOR_CREATION_FORM, "Protected", "No");

postproc

	setproperty(SUPERVISOR_CREATION_FORM, "Protected", "Yes");
PROC SUPERVISOR_ACCESS_PASSWORD

preproc

	// Clear the values in case multiple supervisors setup accounts
	SUPERVISOR_ACCESS_PASSWORD = notappl;
	SUPERVISOR_NAME = "";
	SUPERVISOR_PIN_CODE = notappl;

postproc

	if SUPERVISOR_ACCESS_PASSWORD <> supervisor_password then
		errmsg("Invalid password. You cannot proceed as a supervisor.");
		reenter;
	endif;
PROC SUPERVISOR_NAME

if SUPERVISOR_NAME = "" then
		errmsg("You cannot enter a blank name.");
		reenter;
	endif;

	VerifyStaffNameIsUnique(SUPERVISOR_NAME, "");

PROC SUPERVISOR_PIN_CODE

postproc

	ValidatePINCode(SUPERVISOR_PIN_CODE);

	// Update the staff file (save the data about this supervisor)
	clear(TBD_STAFF_DICT);
	STAFF_CODE = uuid(); // Create unique identifier for supervisor 
	STAFF_NAME = SUPERVISOR_NAME;
	PIN_CODE = SUPERVISOR_PIN_CODE;;
	DEVICE_ID = getdeviceid();
	SUPERVISOR_STAFF_CODE = "";
	TIME_CREATED_ACCOUNT = timestamp();
	setcaselabel(TBD_STAFF_DICT, strip(STAFF_NAME));

	writecase(TBD_STAFF_DICT);

	// Set the login to the supervisor
	LOGIN = STAFF_CODE;
	savesetting(login_setting_key, LOGIN);

	capi_staff_name = LookupStaffName(LOGIN);
	
PROC ASSIGNMENT_SELECTION

preproc
	
	// User is moving forward, this could be the first login after application startup. Try to log in automatically.
	numeric automaticAssignmentSelectionOnStartup = 1;

	// Save the login details
	if STAFF_CODE <> LOGIN then
		loadcase(TBD_STAFF_DICT,LOGIN);
	endif;

	if LOGIN_COUNT = notappl then
		LOGIN_COUNT = 1;
		
	else
		inc(LOGIN_COUNT);
		
	endif;
	
	LOGIN_TIMESTAMP = timestamp();
	LOGIN_PUBLISH_DATE = publishdate();
	
	writecase(TBD_STAFF_DICT);

onfocus

	if automaticAssignmentSelectionOnStartup then
		
		// Retreive previous user. If user got here by selecting "Switch users" the assignment_setting_key will have
		// been set to blank. The previous assignment will only be valid on first login after application startup.
		string previousAssignment = loadsetting(assignment_setting_key);
		
		if loadcase(TBD_ASSIGNMENTS_DICT, previousAssignment) then

			// Previous assignment was found, so automatically select assignment for convenience
			if ASSIGNMENTS_STAFF_CODE = LOGIN then
				ASSIGNMENT_SELECTION = key(TBD_ASSIGNMENTS_DICT);
				advance to MAIN_MENU_FORM;
			endif;
			
		endif;
		
	endif;

	numeric numberInterviewerAssignments = 0;

	ResetVS();

	forcase TBD_ASSIGNMENTS_DICT where ASSIGNMENTS_STAFF_CODE = LOGIN do

		string label = maketext("%s (%v)/ %s (%v)/ %s (%v) / %s (%v)",
			LookupRegionName(ASSIGNMENTS_REGION), ASSIGNMENTS_REGION,
			LookupProvinceName(ASSIGNMENTS_REGION, ASSIGNMENTS_PROVINCE), ASSIGNMENTS_PROVINCE,
			LookupMunicipalName(ASSIGNMENTS_REGION, ASSIGNMENTS_PROVINCE, ASSIGNMENTS_MUNICIPAL), ASSIGNMENTS_MUNICIPAL,
			LookupBarangayName(ASSIGNMENTS_REGION, ASSIGNMENTS_PROVINCE, ASSIGNMENTS_MUNICIPAL, ASSIGNMENTS_BARANGAY), ASSIGNMENTS_BARANGAY);

		if ASSIGNMENTS_EA = notappl then
			label = maketext("Supervise: %s", label);

		else
			label = maketext("Interview: %s / %s", label, LookupEAName(ASSIGNMENTS_EA));

		endif;

		AddStringVS(key(TBD_ASSIGNMENTS_DICT), label);

		if ASSIGNMENTS_ROLE = 1 then
			inc(numberInterviewerAssignments);
		endif;

	endfor;

	if SUPERVISOR_STAFF_CODE = "" then
		AddStringVS("1", "Select census area to supervise");
		capi_staff_role = "Supervisor";

		AddStringVS("2", "Update programs from headquarters");

	else
		capi_staff_role = "Interviewer";

		if numberInterviewerAssignments = 0 then
			errmsg("Your supervisor has not yet assigned you any EAs. Transfer data with the supervisor once they have made an assignment");
		endif;

		AddStringVS("3","Update programs from supervisor");

	endif;

	AddStringVS("4","Switch users");

	setvalueset(ASSIGNMENT_SELECTION,vs_string_codes,vs_labels);

	ASSIGNMENT_SELECTION = "";

postproc

	// Do not automtically login on further attempts. If user tries to log in again, it is because they choose to
	// switch users, so allow them to select their assignment.
	automaticAssignmentSelectionOnStartup = 0;

	if ASSIGNMENT_SELECTION = "1" then
	
		// Select census area to supervise
		if countcases(TBD_GEO_DICT) = 0 then
			errmsg("You do not have a valid list of geocodes. Transfer data with headquarters to get this list.");
			reenter;
		endif;

		skip to SUPERVISOR_REGION;

	elseif ASSIGNMENT_SELECTION = "2" then
		SyncWithHQ(app_sync);
		reenter;

	elseif ASSIGNMENT_SELECTION = "3" then
		StartServer();
		reenter;

	elseif ASSIGNMENT_SELECTION = "4" then
		SwitchUsers();

	elseif loadcase(TBD_ASSIGNMENTS_DICT, ASSIGNMENT_SELECTION) then

		// Save the assignment for the next time the menu application is loaded
		savesetting(assignment_setting_key, ASSIGNMENT_SELECTION);

		CURRENT_REGION = ASSIGNMENTS_REGION;
		CURRENT_PROVINCE = ASSIGNMENTS_PROVINCE;
		CURRENT_MUNICIPAL = ASSIGNMENTS_MUNICIPAL;
		CURRENT_BARANGAY = ASSIGNMENTS_BARANGAY;

		capi_region_name = LookupRegionName(CURRENT_REGION);
		capi_province_name = LookupProvinceName(CURRENT_REGION, CURRENT_PROVINCE);
		capi_municipal_name = LookupMunicipalName(CURRENT_REGION, CURRENT_PROVINCE, CURRENT_MUNICIPAL);
		capi_barangay_name = LookupBarangayName(CURRENT_REGION,CURRENT_PROVINCE, CURRENT_MUNICIPAL, CURRENT_BARANGAY);

		if ASSIGNMENTS_ROLE = 1 then
			skip to INTERVIEWER_MENU;

		else
			skip to SUPERVISOR_MENU;

		endif;

	endif;
PROC SUPERVISOR_REGION

preproc

	ResetVS();

	forcase TBD_GEO_DICT where GEO_AREA_LEVEL = 1 do
		// Prepare value sets for region
		AddNumericVS(GEO_REGION, GEO_AREA_NAME);
	endfor;

	setvalueset(SUPERVISOR_REGION, vs_codes, vs_labels);

	SUPERVISOR_PROVINCE = notappl;
	
PROC SUPERVISOR_PROVINCE

preproc

	capi_region_name = LookupRegionName(SUPERVISOR_REGION);

	ResetVS();

	forcase TBD_GEO_DICT where GEO_AREA_LEVEL = 2 and GEO_REGION = SUPERVISOR_REGION do
		// Prepare value sets for PROVINCE that are within the previously selected province
		AddNumericVS(GEO_PROVINCE, GEO_AREA_NAME);
	endfor;

	setvalueset(SUPERVISOR_PROVINCE, vs_codes, vs_labels);

	SUPERVISOR_PROVINCE = notappl;
	

{preproc

	ResetVS();

	forcase TBD_GEO_DICT where GEO_AREA_LEVEL = 1 do
		// Prepare value sets for region
		AddNumericVS(GEO_REGION, GEO_AREA_NAME);
	endfor;

	setvalueset(SUPERVISOR_REGION, vs_codes, vs_labels);

	SUPERVISOR_PROVINCE = notappl;}
PROC SUPERVISOR_MUNICIPAL

preproc

	capi_region_name = LookupRegionName(SUPERVISOR_REGION);
	capi_province_name = LookupProvinceName(SUPERVISOR_REGION,SUPERVISOR_PROVINCE);

	ResetVS();

	forcase TBD_GEO_DICT where GEO_AREA_LEVEL = 3 and GEO_REGION = SUPERVISOR_REGION and 
		GEO_PROVINCE = SUPERVISOR_PROVINCE do
		// Prepare value sets for PROVINCE that are within the previously selected province
		AddNumericVS(GEO_MUNICIPAL, GEO_AREA_NAME);
	endfor;

	setvalueset(SUPERVISOR_MUNICIPAL, vs_codes, vs_labels);

	SUPERVISOR_MUNICIPAL = notappl;
PROC SUPERVISOR_BARANGAY
preproc

	capi_region_name = LookupRegionName(SUPERVISOR_REGION);
	capi_province_name = LookupProvinceName(SUPERVISOR_REGION,SUPERVISOR_PROVINCE);
	capi_municipal_name = LookupMunicipalName(SUPERVISOR_REGION, SUPERVISOR_PROVINCE, SUPERVISOR_MUNICIPAL);

	ResetVS();

	forcase TBD_GEO_DICT where GEO_AREA_LEVEL = 4 and GEO_REGION = SUPERVISOR_REGION and
		GEO_PROVINCE = SUPERVISOR_PROVINCE and GEO_MUNICIPAL = SUPERVISOR_MUNICIPAL do
		// Prepare value sets for districts that are within the previously selected province
		AddNumericVS(GEO_BARANGAY, GEO_AREA_NAME);
	endfor;

	setvalueset(SUPERVISOR_BARANGAY, vs_codes, vs_labels);

	SUPERVISOR_BARANGAY = notappl;

postproc

	if countcases(TBD_ASSIGNMENTS_DICT where
		ASSIGNMENTS_REGION = SUPERVISOR_REGION and
		ASSIGNMENTS_PROVINCE = SUPERVISOR_PROVINCE and
		ASSIGNMENTS_MUNICIPAL = SUPERVISOR_MUNICIPAL and 
		ASSIGNMENTS_BARANGAY = SUPERVISOR_BARANGAY and
		ASSIGNMENTS_STAFF_CODE = LOGIN and
		ASSIGNMENTS_ROLE = 2) <> 0 then

		errmsg("You are already assigned to this district.");
		reenter;

	endif;

	// Update the assignments file
	clear(TBD_ASSIGNMENTS_DICT);

	ASSIGNMENTS_REGION = SUPERVISOR_REGION;
	ASSIGNMENTS_PROVINCE = SUPERVISOR_PROVINCE;
	ASSIGNMENTS_MUNICIPAL = SUPERVISOR_MUNICIPAL;
	ASSIGNMENTS_BARANGAY = SUPERVISOR_BARANGAY;
	ASSIGNMENTS_STAFF_CODE = LOGIN;
	ASSIGNMENTS_ROLE = 2;
	ASSIGNMENTS_DATE_ASSIGNED_EA = timestamp();

	writecase(TBD_ASSIGNMENTS_DICT);

	// Show the newly saved assignment along with any other assignments the user might have
	reenter ASSIGNMENT_SELECTION;
PROC SUPERVISOR_MENU

onfocus

	capi_ea_assigned_count = 0;
	numeric previousEA = notappl;

	forcase TBD_ASSIGNMENTS_DICT where
		ASSIGNMENTS_REGION = CURRENT_REGION and
		ASSIGNMENTS_PROVINCE = CURRENT_PROVINCE and
		ASSIGNMENTS_MUNICIPAL = CURRENT_MUNICIPAL and
		ASSIGNMENTS_BARANGAY = CURRENT_BARANGAY do

		// Only count assigned EAs once
		if previousEA <> ASSIGNMENTS_EA then
			inc(capi_ea_assigned_count);
			previousEA = ASSIGNMENTS_EA;
		endif;

	endfor;

	SUPERVISOR_MENU = notappl;

postproc

	if SUPERVISOR_MENU = 1 then
		skip to MANAGE_STAFF;

	elseif SUPERVISOR_MENU = 2 then
		skip to EA_ASSIGNMENT_FORM;
		
	elseif SUPERVISOR_MENU = 3 then
		ShowInterviewerStatusReport();
		reenter;

	elseif SUPERVISOR_MENU = 4 then
		SyncWithInterviewer();
		reenter;

	elseif SUPERVISOR_MENU = 5 then
		SyncWithHQ(full_sync);
		reenter;

	elseif SUPERVISOR_MENU = 8 then
		SwitchAssignments();

	elseif SUPERVISOR_MENU = 9 then
		SwitchUsers();

	endif;
PROC INTERVIEWER_MENU

onfocus

	ResetVS();

	AddStringVS("1", "Add new household");

	capi_household_complete_count = 0;
	capi_household_partial_count = 0;

	numeric totalHouseholds = 0;
	numeric autoIncrementHouseholdNumber = 0;

	forcase TBD_INHABITANT_DICT where
		
		BI_REGION = ASSIGNMENTS_REGION and
		BI_PROVINCE = ASSIGNMENTS_PROVINCE and
		BI_MUNICIPAL = ASSIGNMENTS_MUNICIPAL and
		BI_BARANGAY = ASSIGNMENTS_BARANGAY and
		BI_EA = ASSIGNMENTS_EA and
		BI_SEGMENT = ASSIGNMENTS_SEGMENT do

		inc(totalHouseholds);

		if BI_HH_NUMBER > autoIncrementHouseholdNumber then
			autoIncrementHouseholdNumber = BI_HH_NUMBER;
		endif;

		if ispartial(TBD_INHABITANT_DICT) then
			inc(capi_household_partial_count);
			AddStringVS(key(TBD_INHABITANT_DICT), "Continue working on household " + LookupDetailedHouseholdName());

		else
			inc(capi_household_complete_count);

		endif;

	endfor;

	AddStringVS("2", maketext("View all %d households", totalHouseholds));
	AddStringVS("7", "Transfer data with supervisor");
	AddStringVS("8", "Change my assignment");
	AddStringVS("9", "Switch users");

	setvalueset(INTERVIEWER_MENU, vs_string_codes, vs_labels);

	INTERVIEWER_MENU = "";

postproc

	if INTERVIEWER_MENU = "1" then
		// Initialize the case IDs
		BI_REGION = ASSIGNMENTS_REGION;
		BI_PROVINCE = ASSIGNMENTS_PROVINCE;
		BI_MUNICIPAL = ASSIGNMENTS_MUNICIPAL;
		BI_BARANGAY = ASSIGNMENTS_BARANGAY;
		BI_EA = ASSIGNMENTS_EA;
		BI_SEGMENT = ASSIGNMENTS_SEGMENT;
		BI_HH_NUMBER = autoIncrementHouseholdNumber + 1;

		errmsg("Are you sure that you want to add a household numbered %s%v?", BI_SEGMENT, BI_HH_NUMBER)
		select("Yes", continue, "No", INTERVIEWER_MENU);

		LaunchHouseholdProgram();

	elseif INTERVIEWER_MENU = "2" then

		if totalHouseholds = 0 then
			errmsg("There are no households to view");
			reenter;
		
		else
			skip to VIEW_ALL_HOUSEHOLDS;
			
		endif;

	elseif INTERVIEWER_MENU = "7" then
		StartServer();
		reenter;

	elseif INTERVIEWER_MENU = "8" then
		SwitchAssignments();

	elseif INTERVIEWER_MENU = "9" then
		SwitchUsers();

	else
		loadcase(TBD_INHABITANT_DICT, INTERVIEWER_MENU);
		LaunchHouseholdProgram();

	endif;


PROC VIEW_ALL_HOUSEHOLDS

onfocus

	ResetVS();

	forcase TBD_INHABITANT_DICT where
		BI_REGION  = ASSIGNMENTS_REGION and
		BI_PROVINCE = ASSIGNMENTS_PROVINCE and
		BI_MUNICIPAL = ASSIGNMENTS_MUNICIPAL and
		BI_BARANGAY = ASSIGNMENTS_BARANGAY and
		BI_EA = ASSIGNMENTS_EA and
		BI_SEGMENT = ASSIGNMENTS_SEGMENT do

		AddStringVS(key(TBD_INHABITANT_DICT), "Continue working on household " + LookupDetailedHouseholdName());

	endfor;

	setvalueset(VIEW_ALL_HOUSEHOLDS, vs_string_codes, vs_labels);
	VIEW_ALL_HOUSEHOLDS = "";

postproc

	if loadcase(TBD_INHABITANT_DICT, VIEW_ALL_HOUSEHOLDS) then
		LaunchHouseholdProgram();
	endif;
PROC MANAGE_STAFF

onfocus

	ResetVS();

	// First display the supervisor
	AddStringVS(LOGIN, LookupStaffName(LOGIN) + " (Supervisor)");

	// and then the interviewers
	forcase TBD_STAFF_DICT do

		if key(TBD_STAFF_DICT) <> LOGIN then
			AddStringVS(key(TBD_STAFF_DICT), STAFF_NAME);
		endif;

	endfor;

	AddStringVS("1", "Add new interviewer");

	setvalueset(MANAGE_STAFF, vs_string_codes, vs_labels);

	MANAGE_STAFF = "";

postproc

	if MANAGE_STAFF = "1" then
		skip to MANAGE_STAFF_NAME;

	elseif loadcase(TBD_STAFF_DICT, MANAGE_STAFF) then
		skip to MANAGE_STAFF_MEMBER;

	endif;


PROC MANAGE_STAFF_MEMBER

onfocus

	capi_manage_staff_name = LookupStaffName(MANAGE_STAFF);

	MANAGE_STAFF_MEMBER = notappl;

postproc

	if MANAGE_STAFF_MEMBER = 1 then
	
		// Prefill in the staff member's name
		MANAGE_STAFF_NAME = STAFF_NAME;
		skip to MANAGE_STAFF_NAME;

	elseif MANAGE_STAFF_MEMBER = 2 then

		if PIN_CODE = notappl then
			errmsg("Staff PIN code of %s is not yet set", capi_manage_staff_name);

		else
			errmsg("Staff PIN code of %s is %v", capi_manage_staff_name, PIN_CODE);

		endif;

		reenter;

	elseif MANAGE_STAFF_MEMBER = 3 then
	
		PIN_CODE = notappl;
		writecase(TBD_STAFF_DICT);

		errmsg("Staff PIN code of %s has been reset", capi_manage_staff_name);

		if STAFF_CODE = LOGIN then
			// Supervisor changed their code, log out so that they can log in and reset it
			SwitchUsers();

		else
			reenter;

		endif;

	endif;


PROC MANAGE_STAFF_NAME

onfocus

	if MANAGE_STAFF = "1" then
		MANAGE_STAFF_NAME = "";
	endif;

postproc

	if MANAGE_STAFF_NAME = "" then
		errmsg("You cannot enter a blank name.");
		reenter;

	elseif MANAGE_STAFF = "1" then
		VerifyStaffNameIsUnique(MANAGE_STAFF_NAME, "");

		// Add a new interviewer
		clear(TBD_STAFF_DICT);

		STAFF_CODE = uuid(); // Create unique identifier for interviewer 
		STAFF_NAME = MANAGE_STAFF_NAME;
		SUPERVISOR_STAFF_CODE = LOGIN;
		TIME_CREATED_ACCOUNT = timestamp();
		setcaselabel(TBD_STAFF_DICT, strip(STAFF_NAME));

		writecase(TBD_STAFF_DICT);

		errmsg("%s successfully added as an interviewer", LookupStaffName(STAFF_CODE));

		reenter MANAGE_STAFF;

	else
		// Modify the name
		string oldName = LookupStaffName(STAFF_CODE);

		if MANAGE_STAFF_NAME = oldName then
			errmsg("The name is the same as before and has not been changed");

		else
			VerifyStaffNameIsUnique(MANAGE_STAFF_NAME, MANAGE_STAFF);

			STAFF_NAME = MANAGE_STAFF_NAME;
			setcaselabel(TBD_STAFF_DICT, strip(STAFF_NAME));
			writecase(TBD_STAFF_DICT);

			errmsg("%s successfully renamed to %s", oldName, LookupStaffName(STAFF_CODE));

		endif;

		reenter MANAGE_STAFF_MEMBER;

	endif;

PROC INTERVIEWER_CODE

onfocus

	ResetVS();

	numeric eligbleInterviewers = 0;

	forcase TBD_STAFF_DICT where LOGIN <> STAFF_CODE do
		// Not supervisor
		AddStringVS(key(TBD_STAFF_DICT), STAFF_NAME);
		inc(eligbleInterviewers);
	endfor;

	if eligbleInterviewers = 0 then
		errmsg("You must add interviewers before you can make any assignments");
		reenter SUPERVISOR_MENU;
	endif;

	setvalueset(INTERVIEWER_CODE, vs_string_codes, vs_labels);

	INTERVIEWER_CODE = "";

postproc

	loadcase(TBD_STAFF_DICT, INTERVIEWER_CODE);

	capi_manage_staff_name = LookupStaffName(INTERVIEWER_CODE);

	// Check if the interviewer already has an assignment
	numeric numberAssignmentsForInterviewer = countcases(TBD_ASSIGNMENTS_DICT
		where ASSIGNMENTS_STAFF_CODE = INTERVIEWER_CODE and ASSIGNMENTS_ROLE = 1);

	if numberAssignmentsForInterviewer > 0 then
		errmsg("%s already has %d assignment. Are you sure you want to add another?",
			LookupStaffName(INTERVIEWER_CODE), numberAssignmentsForInterviewer)
			select("Yes", continue, "No", INTERVIEWER_CODE);
	endif;


PROC INTERVIEWER_EA

onfocus

	ResetVS();

	// Display all enumerations areas that are within the current province and district
	forcase TBD_GEO_DICT where GEO_AREA_LEVEL = 3 and
		GEO_REGION = CURRENT_REGION and GEO_PROVINCE = CURRENT_PROVINCE and 
		GEO_MUNICIPAL = CURRENT_MUNICIPAL and GEO_BARANGAY = CURRENT_BARANGAY do

		string eaAssignedNames;

		string eaUniverse = maketext("%v%v%v%v%v", GEO_REGION, GEO_PROVINCE, GEO_MUNICIPAL, GEO_BARANGAY, 
		GEO_EA);

		// Forcase loops can't be nested, so iterate using locate/loadcase.
		// Set position at smallest case that satifies condition.
		if locate(TBD_ASSIGNMENTS_DICT, >=, eaUniverse) then

			// Load all cases where eaUniverse is a substring of the key of the case
			while loadcase(TBD_ASSIGNMENTS_DICT) and pos(eaUniverse, key(TBD_ASSIGNMENTS_DICT)) = 1 do

				if ASSIGNMENTS_ROLE = 1 then
					// Only interviewers
					if length(eaAssignedNames) > 0 then
						// Use a comma to separate multiple names
						eaAssignedNames = eaAssignedNames + ", ";
					endif;

					eaAssignedNames = eaAssignedNames + LookupStaffName(ASSIGNMENTS_STAFF_CODE);

				endif;

			enddo;

		endif;

		if length(eaAssignedNames) > 0 then
			eaAssignedNames = " (" + eaAssignedNames + ")";
		endif;

		// Display EA codes
		AddNumericVS(GEO_EA, LookupEAName(GEO_EA) + eaAssignedNames);

	endfor;

	setvalueset(INTERVIEWER_EA,vs_codes,vs_labels);

	// Clear EA assignment
	INTERVIEWER_EA = notappl;

postproc

	numeric numberExistingAssignments = 0;

	forcase TBD_ASSIGNMENTS_DICT where
		ASSIGNMENTS_REGION = CURRENT_REGION and
		ASSIGNMENTS_PROVINCE = CURRENT_PROVINCE and
		ASSIGNMENTS_MUNICIPAL = CURRENT_MUNICIPAL and
		ASSIGNMENTS_BARANGAY = CURRENT_BARANGAY and
		ASSIGNMENTS_EA = INTERVIEWER_EA and
		ASSIGNMENTS_ROLE = 1 do

		inc(numberExistingAssignments);

		if ASSIGNMENTS_STAFF_CODE = INTERVIEWER_CODE then
			errmsg("%s has already been assigned to %s", LookupEAName(INTERVIEWER_EA), LookupStaffName(INTERVIEWER_CODE));
			reenter;
		endif;

	endfor;

	if numberExistingAssignments >= 1 then
		errmsg("Are you sure you want to assign %s to more than one interviewer?", LookupEAName(INTERVIEWER_EA))
		select("Yes", continue, "No", INTERVIEWER_EA);
	endif;

	errmsg("Are you sure you want to assign %s to %s?", LookupEAName(INTERVIEWER_EA), LookupStaffName(INTERVIEWER_CODE))
	select("Yes", continue, "No", INTERVIEWER_EA);

	clear(TBD_ASSIGNMENTS_DICT);

	ASSIGNMENTS_REGION = CURRENT_REGION;
	ASSIGNMENTS_PROVINCE = CURRENT_PROVINCE;
	ASSIGNMENTS_MUNICIPAL = CURRENT_MUNICIPAL;
	ASSIGNMENTS_BARANGAY = CURRENT_BARANGAY;
	ASSIGNMENTS_EA = INTERVIEWER_EA;
	ASSIGNMENTS_STAFF_CODE = INTERVIEWER_CODE;
	ASSIGNMENTS_ROLE = 1;
	ASSIGNMENTS_SEGMENT = segment_alphabet[( numberExistingAssignments + 1 ):1];

	ASSIGNMENTS_DATE_ASSIGNED_EA = timestamp();

	writecase(TBD_ASSIGNMENTS_DICT);

	errmsg("%s successfully assigned to %s", LookupEAName(ASSIGNMENTS_EA), LookupStaffName(INTERVIEWER_CODE));

	reenter SUPERVISOR_MENU;

